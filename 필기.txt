1. 새프로젝트 생성
  - File > New > Dynamic Web Project
  - Project name: "JSPTest"
  - next > next > finish

2. 테스트용
  - WebContent > hello.html
  - JSPTest > Java Resources > src > "com.test.jsp" 패키지 생성 > "Hello.java" 생성


JSP, Java Server Pages
- Servlet 다음 버전

서블릿 장점
- 자바 기반(자바의 수많은 기능을 웹 페이지 제작하는데 적용할 수 있다.)

서블릿 단점
- HTML, CSS, JavaScript 작성이 힘들다. > 문자열 처리;;

JSP 장점
- HTML, CSS, JavaScript 작성이 쉽다.
- HTML 기반

JSP 단점
- 자바 작업에 대한 환경이 좀 열약하다.(서블릿에 비해서..)




JSP 기본 요소
1. JSP 지시자, 지시어, 선언문, JSP Directive
2. 스크립트 요소, Scripting Elements
3. 액션 태그, Action Tags


1. JSP 지시자, 지시어, 선언문, JSP Directive
- <%@ %>
- JSP 페이지를 실행하기 위해 JSP 컨테이너(톰캣)에게 해당 JSP를 처리하기 위한 여러가지 환경 설정
- page 지시자
- include 지시자
- taglib 지시자


2. 스크립트 요소, Scripting Elements
- <% %>
- 자바 구문을 사용할 수 있게 하는 요소(= 서블릿과 유사한 환경을 제공)
- Scriptlet
- Expression
- Declaration


3. 액션 태그, Action Tags
- <jsp:XXX>, <c:XXX>
- 프로그래밍 기능이 있는 태그. <c:if>
- JSP 기본 액션 태그
- JSTL 확장 액션 태그
- 사용자 커스텀 액션 태그






page 지시자
- <%@ page 속성="값" 속성="값" 속성="값"... %>
- JSP 페이지 상단부에 기재
- 1개 이상 작성이 가능하다.
- 톰캣에게 현재 JSP 페이지의 상태를 알려주는 역할
- <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
	a. language="java"
	- JSP 페이지에서 사용할 서버 프로그래밍 언어 지정
	
	b. contentType="text/html; charset=UTF-8"
	- JSP 페이지 컨텐츠 기술
	- 현재 페이지는 text/html 포맷의 데이터이고,
	- 문자셋은 UTF-8로 되어있다.
	- text/html : MIME 타입(파일의 종류를 나타내는 열거형)
	- 톰캣이 UTF-8로 JSP 페이지를 읽는다.(***)
    
    c. pageEncoding="UTF-8"
    - 브라우저에게 돌려줄 페이지의 인코딩 방식 지정(***)
    
    d. errorPage
    - JSP 실행 중 에러가 발생하면 보여줄 페이지
    


include 지시자
- <%@include file="URL" %>
- 특정 JSP(HTML, Text 등) 페이지를 현재 JSP 페이지 일부에 삽입하는 기능
- 조각 페이지: 한 페이지 이상에서 반복되는 내용을 재사용하는 용도
- <iframe> 유사



taglib 지시자
- 액션 태그와 같이 수업



Scriptlet, 스크립틀릿
- <% %>
- 이 영역은 자바 영역이다.
- HTML 문서안에 자바 코드를 작성할 수 있게 됨.
- 사용 빈도 높음
- 비즈니스 코드 작성(데이터 처리, JDBC, 동적 HTML/CSS/JavaScript 조작)


Expression, 표현식
- <%= 값 %>
- 값: 상수, 변수, 메소드 반환값 등..
- 해당 위치에 값을 출력한다.(HTML 소스로 출력한다.)



Declaration, 선언부
- <%! %>
- 해당 JSP 페이지에서 사용할 클래스 멤버 변수와 멤버 메소드를 만드는 영역
- 메소드 선언할 때 주로 사용 > 빈도 낮음 > 대체 방법(***)이 따로 있음







JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하지 않아도 JSP가 미리 만들어서 제공하는 객체
- 톰캣이 생성한다.
- 예약어로 접근한다.
- request, response, session, pageContext //*****
- out, application //***
- config, page, exception //*

- request, session, pageContext, application
	- 내부에 사용자 데이터를 저장할 수 있는 공간을 가지고 있다
	- 입출력: setAttribute(key, value), getAttribute(key)





1. request 객체
	a. 클라이언트가 서버로 전송한 데이터를 가져오기
		- getParameter(key)
		- getParameterValues(key)
		- ex05_form.jsp //사용자가 데이터 입력 + 서버 전송하는 페이지
		- ex05_ok.jsp //사용자 보낸 데이터를 수신하는 페이지
		
		- 여태 수업했던 모든 컨트롤 전송+수신
		- ex06_form.jsp //전송
		- ex06_ok.jsp //수신
		
		- ex07_form.jsp
		- ex07_ok.jsp
		
	b. 클라이언트가 서버로 전송한 데이터의 인코딩 처리
		- POST + 한글 -> UTF-8 변환
		- request.setCharacterEncoding("UTF-8");
	
	c. 클라이언트가 서버로 전송할 때 관련한 정보 가져오기
		- ex08_request_header.jsp


2. response 객체
	- HTTP 요청에 대한 응답 정보를 제어하는 객체
	- 


































  